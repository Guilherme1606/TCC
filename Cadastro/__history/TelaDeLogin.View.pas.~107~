unit TelaDeLogin.View;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.SysUtils,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  FormularioBase.View,
  Vcl.ExtCtrls,
  Vcl.Imaging.pngimage,
  JvExControls,
  JvXPCore,
  JvXPButtons,
  Praxio.Botoes.SimpleButton,
  Vcl.StdCtrls,
  TelaDeLogin.Interfaces,
  Vcl.Buttons,
  IdMessage,
  IdSMTP,
  IdSSLOpenSSL,
  IdExplicitTLSClientServerBase,
  IdText,
  ComObj;

type
  TTTelaDeLoginView = class(TFormularioBase)
    PainelLogin: TPanel;
    LabelUsuario: TLabel;
    LabelSenha: TLabel;
    EdtUsuarioLogin: TEdit;
    Shape2: TShape;
    Image1: TImage;
    EdtSenhaLogin: TEdit;
    Shape3: TShape;
    Label1: TLabel;
    Label2: TLabel;
    PainelCadastro: TPanel;
    Label3: TLabel;
    Label4: TLabel;
    Shape4: TShape;
    Shape5: TShape;
    EdtUsuario: TEdit;
    EdtNomeCompleto: TEdit;
    EdtEmail: TEdit;
    EdtSenha: TEdit;
    Shape7: TShape;
    Shape8: TShape;
    Label5: TLabel;
    Label6: TLabel;
    Painel: TPanel;
    Button1: TButton;
    Label7: TLabel;
    BotaoCadastrarUsuario: TButton;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure Label1Click(Sender: TObject);
    procedure BotaoLoginClick(Sender: TObject);
    procedure BotaoCadastrarClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure BotaoCadastrarUsuarioClick(Sender: TObject);
  private
    FTelaDeLoginUseCase: ITelaDeLoginUseCase;
    FTelaDeLoginModel: ITelaDeLoginModel;
  public
    { Public declarations }
  end;

var
  TTelaDeLoginView: TTTelaDeLoginView;
const
     olMailItem = 0;
implementation
uses
  Menu_Principal,
  Due.Funcoes.Utilitarios;
{$R *.dfm}

procedure TTTelaDeLoginView.BotaoCadastrarClick(Sender: TObject);
begin
  showmessage('cadastro ainda nao implementado');

end;

procedure TTTelaDeLoginView.BotaoCadastrarUsuarioClick(Sender: TObject);
  procedure CadastroUsuario;
  begin
    FTelaDeLoginModel.Usuario         := EdtUsuario.text;
    FTelaDeLoginModel.Nome_Completo   := EdtNomeCompleto.text;
    FTelaDeLoginModel.Email           := EdtEmail.text;
    FTelaDeLoginModel.Senha           := EdtSenha.text;
    FTelaDeLoginModel.NovoRegistro    := true;

    var Retorno := FTelaDeLoginUseCase.Gravar(FTelaDeLoginModel);

    if Retorno.Valido then
      ShowMessage(Retorno.Mensagem)
    else
      ShowMessage(Retorno.Mensagem);
  end;

  function validaemail : boolean;
  var
    IdSMTP,idSMTP1: TIdSMTP;
    IdMessage: TIdMessage;
    LSocketSSL: TIdSSLIOHandlerSocketOpenSSL;
    IdText: TIdText;
    Outlook: OleVariant;
    vMailItem: variant;

    codigoseguranca : string;
  begin
    result := false;
    Randomize;
    codigoseguranca := FormatFloat('0000',Random(9999));
    IdSMTP    := TIdSMTP.Create(self);
    IdMessage := TIdMessage.Create(self);
    LSocketSSL:= TIdSSLIOHandlerSocketOpenSSL.Create(self);

    IdSMTP    := TIdSMTP.Create(self);
    IdMessage := TIdMessage.Create(self);
    LSocketSSL:= TIdSSLIOHandlerSocketOpenSSL.Create(self);

     //Configuração do servidor SMTP

    LSocketSSL.SSLOptions.Method := sslvTLSv1;
    LSocketSSL.PassThrough := True;
    LSocketSSL.SSLOptions.Mode := sslmServer;

    IdSMTP.AuthType := satDefault;
    IdSMTP.Port := 587;
    IdSMTP.IOHandler := LSocketSSL;
    IdSMTP.Password := 'Tccdue2023';
    IdSMTP.Username := 'tcc-due@outlook.com';
    IdSMTP.ConnectTimeout := 0;
    IdSMTP.Host := 'smtp.office365.com';
    IdSMTP.AuthType := satDefault;
    IdSMTP.UseTLS := utUseExplicitTLS;
    IdSMTP.ReadTimeout := 10000;
    IdSMTP.ConnectTimeout := 10000;

    // Configuração da mensagem
    IdMessage.From.Address := 'tcc-due@outlook.com';
    IdMessage.From.Name := 'tcc-due';
    IdMessage.ReplyTo.EMailAddresses := IdMessage.From.Address;
    IdMessage.Recipients.Add.Text := EdtEmail.Text;
    IdMessage.Encoding := meMIME;
    IdMessage.Subject := 'Código de segurança';
    IdMessage.Body.Text := 'O seu código de segurança é: ' +  codigoseguranca;

    IdText := TIdText.Create(IdMessage.MessageParts);
    IdText.Body.Add('O seu código de segurança é: ' +  codigoseguranca);
    IdText.ContentType := 'text/plain; charset=iso-8859-1';
    try
      Outlook := GetActiveOleObject('Outlook.Application');
    except
      Outlook := CreateOleObject('Outlook.Application');
    end;

    vMailItem := Outlook.CreateItem(olMailItem);
    vMailItem.Subject := 'Código de segurança';
    vMailItem.Body := 'Teste';
    vMailItem.GetInspector.Activate;
    vMailItem.Display(True);
    vMailItem.Recipients.Add.Text;
    vMailItem.From.Address := 'tcc-due@outlook.com';
    vMailItem.From.Name := 'tcc-due';
    vMailItem.ReplyTo.EMailAddresses := IdMessage.From.Address;
    vMailItem.Recipients.Add.Text := EdtEmail.Text;


    try
      IdSMTP.Connect;
      IdSMTP.Authenticate;
    except
      On E: Exception Do
      Begin
        showmessage('Erro na autenticação! '+E.Message);
      End;
    end;

    try
      IdSMTP.Send(IdMessage);
      VarClear(Outlook);
    except
      On E: Exception Do
      Begin
        showmessage('Erro ao enviar a mensagem! '+E.Message);
      End;
    end;

    // desconecta do servidor
      IdSMTP.Disconnect;
    // liberação da DLL
      UnLoadOpenSSLLibrary;
    // liberação dos objetos da memória
      FreeAndNil(IdMessage);
      FreeAndNil(LSocketSSL);
      FreeAndNil(IdSMTP);

    var codigodigitado := inputbox('Olá usuário ' + EdtUsuario.text,'Digite o códgio que você recebeu no e-mail '
                                  +EdtEmail.Text, 'Digite o código aqui' );
    if codigodigitado = codigoseguranca then
      result := true;
    IdSMTP.Disconnect;
    FreeAndNil(IdMessage);
    FreeAndNil(LSocketSSL);
    FreeAndNil(IdSMTP);
  end;
begin
  Painel.Left := 0;
  Painel.Width:= 295;
  if validaemail then
    CadastroUsuario
  else
    showmessage('Código de segurança inválido');
end;

procedure TTTelaDeLoginView.BotaoLoginClick(Sender: TObject);
begin
  showmessage('login ainda nao implementado');
end;

procedure TTTelaDeLoginView.Button1Click(Sender: TObject);
begin
  FTelaDeLoginModel.Usuario := EdtUsuarioLogin.Text;
  FTelaDeLoginModel.Senha   := EdtSenhaLogin.Text;
  var resultado := FTelaDeLoginUseCase.ValidaUsuarioLogin(FTelaDeLoginModel);

  if resultado.Valido then
  begin
    abrirtela(TTMenu_Principal);
  end
  else
   showmessage(resultado.Mensagem);
end;

procedure TTTelaDeLoginView.FormCreate(Sender: TObject);
begin
  inherited;
  FTelaDeLoginUseCase:= Resolve<ITelaDeLoginUseCase>;
  FTelaDeLoginModel  := Resolve<ITelaDeLoginModel>;
end;

procedure TTTelaDeLoginView.Label1Click(Sender: TObject);
begin
  inherited;
  Painel.Left := PainelLogin.Left;
  Painel.Width:= PainelLogin.Width;
end;

end.
