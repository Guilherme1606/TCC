unit Contrato.Repository;

interface
uses
  Due.Utilitarios.Base.Repository,
  Due.Utilitarios.Base.Types,
  Contrato.Interfaces,
  System.generics.collections,
  System.SysUtils,
  FireDAC.Comp.DataSet,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param,
  IdHashMessageDigest,
  FireDAC.DApt,
  Data.DB,
  DueDMControle;

type
  TContratosRepository = class(TBaseRepository, IContratosRepository)
  private

  public
    function Atualizar(aModel: IContratosModel): TValidacao;
    function Inserir(aModel: IContratosModel): TValidacao;
    //function Excluir(aModel: IContratosModel): TValidacao;

  end;
implementation

{ TContratosRepository }

function TContratosRepository.Atualizar(aModel: IContratosModel): TValidacao;
var
  FQry : TFDQuery;
  procedure RealizaAtualizacao;
  begin
    FQry :=  TFDQuery.Create(nil);
    FQry.ConnectionName :=  'DbBGM';
    FQry.SQL.Add('UPDATE  TB_CADASTRO_CONTRATO SET ID_Contrato = :P_ID_Contrato ,CPF = :P_CPF,    ');
    FQry.SQL.Add('Servico = :P_Servico,Inicio = :P_Inicio, Entrega = :P_Entrega,Valor = :P_Valor, ');
    FQry.SQL.Add('STATUS  = :P_Status                                                             ');
    FQry.SQL.Add('WHERE ID_Contrato = :P_ID_Contrato                                              ');
    FQry.ParamByName('P_ID_Contrato').Asinteger := aModel.ID_Contrato;
    FQry.ParamByName('P_CPF').AsString := aModel.CPF;
    FQry.ParamByName('P_Servico').AsString := aModel.Servico;
    FQry.ParamByName('P_Inicio').AsDateTime := aModel.Inicio;
    FQry.ParamByName('P_Entrega').AsDateTime := aModel.Entrega;
    FQry.ParamByName('P_Valor').value := aModel.Valor;
    FQry.ParamByName('P_Status').AsString := aModel.Status;
    FQry.ParamByName('P_Usuario_Responsavel').Asinteger := aModel.Usuario_Responsavel;
    FQry.ExecSQL;
    FreeAndNil(FQry);
  end;
begin
  try
    RealizaAtualizacao;
    result.Valido := true;
    result.Mensagem := 'Contrato: ' + inttostr(amodel.ID_Contrato) + ' atualizado com sucesso';
  except
    On E: Exception Do
    Begin
      result.Mensagem := E.Message;
      result.Valido := False;
    End;
  end;

end;

//function TContratosRepository.Excluir(aModel: IContratosModel): TValidacao;
//var
//  FQry : TFDQuery;
//  procedure RealizaExclusao;
//  begin
//    FQry :=  TFDQuery.Create(nil);
//    FQry.ConnectionName :=  'DbBGM';
//    FQry.SQL.Add('DELETE TB_CADASTRO_CLIENTE WHERE CPF = :P_CPF');
//    FQry.ParamByName('P_CPF').AsString := aModel.ID_Contrato;
//    FQry.ExecSQL;
//    FreeAndNil(FQry);
//  end;
//begin
//    try
//    RealizaExclusao;
//    result.Valido := true;
//    result.Mensagem := 'Cliente: ' + aModel.CPF + ' Excluido com sucesso';
//  except
//    On E: Exception Do
//    Begin
//      result.Mensagem := E.Message;
//      result.Valido := False;
//    End;
//  end;
//
//end;

function TContratosRepository.Inserir(aModel: IContratosModel): TValidacao;
var
  FQry : TFDQuery;
  procedure RealizaInclusao;
  begin
    FQry :=  TFDQuery.Create(nil);
    FQry.ConnectionName :=  'DbBGM';
    FQry.SQL.Add('INSERT INTO TB_CADASTRO_CLIENTE(ID_CONTRATO,CPF,Servico,Inicio,Entrega,Valor,Status,Usuario_Responsavel)');
    FQry.SQL.Add('VALUES(IDENTIFICADOR_CONTRATO.NEXTVAL,:P_CPF,:P_Servico,:P_Inicio,:P_Entrega,:P_Valor,:P_Status,:P_Usuario_Responsavel)');
    FQry.ParamByName('P_CPF').AsString := aModel.CPF;
    FQry.ParamByName('P_Servico').AsString := aModel.Servico;
    FQry.ParamByName('P_Inicio').AsDateTime := aModel.Inicio;
    FQry.ParamByName('P_Entrega').AsDateTime := aModel.Entrega;
    FQry.ParamByName('P_Valor').value := aModel.Valor;
    FQry.ParamByName('P_Status').AsString := aModel.Status;
    FQry.ParamByName('P_Usuario_Responsavel').Asinteger := aModel.Usuario_Responsavel;
    FQry.ExecSQL;
    FreeAndNil(FQry);
  end;
begin
  try
    RealizaInclusao;
    result.Valido := true;
    result.Mensagem := 'Contrato para o : ' + amodel.CPF + ' cadastrado com sucesso';
  except
    On E: Exception Do
    Begin
      result.Mensagem := E.Message;
      result.Valido := False;
    End;
  end;

end;

end.
